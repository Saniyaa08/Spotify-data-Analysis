#import the dependencies
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#read the csv file
df_tracks = pd.read_csv('C:/Users/DELL/Downloads/tracks.csv')
df_tracks.head()

#identify the null values
pd.isnull(df_tracks).sum()

#info od dataset
df_tracks.info()

#least popular song
sorted_df = df_tracks.sort_values('popularity',ascending = True).head(10)
sorted_df

#descriptive statistics
df_tracks.describe().transpose()

#most popular song
most_popular = df_tracks.query('popularity>90',inplace = False).sort_values('popularity', ascending = False)
most_popular[:10]

#By setting the "release_date" column as the index and converting it to datetime format, you enable various time-based operations and analyses on the DataFrame
df_tracks.set_index("release_date" , inplace = True)
df_tracks.index =pd.to_datetime(df_tracks.index)
df_tracks.head()

# retrieves the value of the "artists" column in the DataFrame df_tracks at index position 18.
df_tracks[["artists"]].iloc[18]

#these lines of code create a new "duration" column in df_tracks with the values converted from milliseconds to seconds and then remove the original "duration_ms" column 
df_tracks["duration"] = df_tracks["duration_ms"].apply(lambda x: round (x/1000))
df_tracks.drop("duration_ms",inplace=True,axis=1)

#to print upper 5 rows
df_tracks.duration.head()

#creates a correlation matrix by calculating the Pearson correlation coefficient for selected columns in the df_tracks 
corr_df = df_tracks.drop(["key","mode","explicit"],axis=1).corr(method="pearson")
plt.figure(figsize=(14,6))
heatmap = sns.heatmap(corr_df,annot=True,fmt=".1g",vmin=-1,vmax=1,center=0,cmap="inferno",linewidths=1,linecolor="Black")
heatmap.set_title("correlation Heatmap between variable")
heatmap.set_xticklabels(heatmap.get_xticklabels(),rotation=90)

#this code selects a random sample from the df_tracks DataFrame, where the size of the sample is approximately 0.4% of the original DataFrame
sample_df = df_tracks.sample(int(0.004*len(df_tracks)))
print(len(sample_df))

#the code creates a scatter plot with a regression line to visualize the relationship between the "loudness" and "energy" variables in the sample_df
plt.figure(figsize=(10,6))
sns.regplot(data = sample_df , y = "loudness",x = "energy",color = "c").set(title ="Loudness vs energy correlation")

#the code creates a scatter plot with a regression line to visualize the relationship between the "popularity" and "acousticness" variables in the sample_df 
plt.figure(figsize=(10,6))
sns.regplot(data = sample_df , y = "popularity",x = "acousticness",color = "b").set(title =" Popularity vs acousticness correlation")

# these lines of code create a new column 'dates' in the DataFrame, convert the values in that column to datetime format
df_tracks['dates']=df_tracks.index.get_level_values('release_date')
df_tracks.dates=pd.to_datetime(df_tracks.dates)
years=df_tracks.dates.dt.year

# to visualize the distribution of the "years" data using a histogram
sns.displot(years,discrete = "True",aspect = 2,height =5,kind="hist").set(title = "Number of songs per year")

#to create a bar plot that shows the relationship between years and duration using the data from the years and total_dr 
total_dr = df_tracks.duration
fig_dims = (18,7)
fig,ax = plt.subplots(figsize = fig_dims)
fig = sns.barplot(x = years,y=total_dr,ax=ax,errwidth=False).set(title="Years vs Duration")
